name: MCP Servers Management

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a release and auto-increment version'
        type: boolean
        default: false
      version_bump:
        description: 'Version bump type'
        type: choice
        options:
          - patch
          - minor
          - major
        default: patch

permissions:
  contents: write
  pull-requests: write

jobs:
  generate-and-update:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Make script executable
      run: chmod +x scripts/bash/create-mcp.sh
      
    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq
      
    - name: Generate MCP servers JSON
      run: ./scripts/bash/create-mcp.sh
      
    - name: Setup Python
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install bump2version
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true'
      run: pip install bump2version
      
    - name: Auto-increment version
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true'
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Create .bumpversion.cfg if it doesn't exist
        if [ ! -f .bumpversion.cfg ]; then
          cat > .bumpversion.cfg << EOF
        [bumpversion]
        current_version = $(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        commit = True
        tag = True
        
        [bumpversion:file:pyproject.toml]
        search = version = "{current_version}"
        replace = version = "{new_version}"
        
        [bumpversion:file:src/mcp_cli/__init__.py]
        search = __version__ = "{current_version}"
        replace = __version__ = "{new_version}"
        EOF
        fi
        
        # Bump version
        bump2version ${{ github.event.inputs.version_bump }}
        
        # Push changes
        git push origin main --tags
        
    - name: Get version from pyproject.toml
      id: version
      run: |
        VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$VERSION" >> $GITHUB_OUTPUT
        
    - name: Get tag name for release
      id: tag
      if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag=v${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
      
    - name: Create distribution zip
      if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
      run: |
        cd dist
        zip -r ../mcp-servers-${{ steps.tag.outputs.tag }}.zip .
        cd ..
        
    - name: Create Release with GitHub CLI
      if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
      run: |
        gh release create ${{ steps.tag.outputs.tag }} \
          --title "Release ${{ steps.tag.outputs.tag }}" \
          --notes "## MCP Servers Release ${{ steps.tag.outputs.tag }}

        This release contains the latest MCP servers configuration file.

        ### 📦 Downloads
        - **\`mcp_servers.json\`** - Individual JSON file for direct use
        - **\`mcp-servers-${{ steps.tag.outputs.tag }}.zip\`** - Complete distribution package

        ### 📋 What's Included
        - Complete list of available MCP servers
        - Base template servers from \`templates/base_mcp.json\`
        - Dynamically fetched servers from the MCP registry
        - Total servers: Base + Fetched from API

        ### 🚀 Usage
        1. Download either the JSON file directly or the zip package
        2. Use with your MCP-compatible tools and applications
        3. The JSON file contains all server configurations in a standardized format

        ### ⚠️ Note
        **Ignore the \"Source code\" downloads** - they contain the entire repository. 
        Use the files listed above for the MCP servers data." \
          ./dist/mcp_servers.json \
          ./mcp-servers-${{ steps.tag.outputs.tag }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}