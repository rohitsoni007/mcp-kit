name: MCP Servers Management

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
    paths:
      - 'scripts/**'
      - 'templates/**'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a release and auto-increment version'
        type: boolean
        default: false
      version_bump:
        description: 'Version bump type'
        type: choice
        options:
          - patch
          - minor
          - major
        default: patch

permissions:
  contents: write
  pull-requests: write

jobs:
  generate-and-update:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Make script executable
      run: |
        chmod +x scripts/bash/create-mcp.sh
        echo "Script permissions:"
        ls -la scripts/bash/create-mcp.sh
      
    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq
      
    - name: Generate MCP servers JSON
      run: |
        if [ -f "scripts/bash/create-mcp.sh" ]; then
          echo "Running MCP servers generation script..."
          ./scripts/bash/create-mcp.sh
          
          # Verify the output was created
          if [ -f "dist/mcp_servers.json" ]; then
            echo "‚úÖ MCP servers JSON generated successfully"
            echo "File size: $(wc -c < dist/mcp_servers.json) bytes"
            echo "Number of servers: $(jq 'length' dist/mcp_servers.json)"
          else
            echo "‚ùå Failed to generate MCP servers JSON"
            exit 1
          fi
        else
          echo "Bash script not found, this should not happen in CI"
          exit 1
        fi
      
    - name: Workflow Status Check
      run: |
        echo "üîç Checking workflow conditions..."
        echo "Event name: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo "Create release input: ${{ github.event.inputs.create_release }}"
        
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          echo "‚úÖ Tag push detected - release steps will run"
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.create_release }}" == "true" ]]; then
          echo "‚úÖ Manual release requested - release steps will run"
        else
          echo "‚ÑπÔ∏è Regular push/PR - only generation steps will run"
          echo "   To create a release:"
          echo "   1. Use 'Run workflow' button with 'Create release' checked, OR"
          echo "   2. Push a tag (e.g., git tag v1.0.0 && git push origin v1.0.0)"
        fi
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install bump2version
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true'
      run: pip install bump2version
      
    - name: Auto-increment version
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true'
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Commit any generated files first to clean the working directory
        if [ -n "$(git status --porcelain)" ]; then
          echo "Committing generated files..."
          git add .
          git commit -m "chore: update generated MCP servers file"
        fi
        
        # Verify .bumpversion.cfg exists and is valid
        if [ ! -f .bumpversion.cfg ]; then
          echo "Error: .bumpversion.cfg not found"
          exit 1
        fi
        
        # Show current version
        echo "Current version: $(grep '^current_version = ' .bumpversion.cfg | cut -d' ' -f3)"
        
        # Bump version
        bump2version ${{ github.event.inputs.version_bump }} --verbose
        
        # Push changes
        git push origin main --tags
        
    - name: Get version from pyproject.toml
      id: version
      if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
      run: |
        # Try multiple methods to extract version
        VERSION=""
        
        # Method 1: Try with Python tomllib (Python 3.11+)
        if [ -z "$VERSION" ]; then
          VERSION=$(python3 -c "
          try:
              import tomllib
              with open('pyproject.toml', 'rb') as f:
                  data = tomllib.load(f)
              print(data['project']['version'])
          except Exception:
              pass
          " 2>/dev/null || echo "")
        fi
        
        # Method 2: Try with toml library
        if [ -z "$VERSION" ]; then
          pip install toml >/dev/null 2>&1 || true
          VERSION=$(python3 -c "
          try:
              import toml
              with open('pyproject.toml', 'r') as f:
                  data = toml.load(f)
              print(data['project']['version'])
          except Exception:
              pass
          " 2>/dev/null || echo "")
        fi
        
        # Method 3: Fallback to grep/sed
        if [ -z "$VERSION" ]; then
          VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/' || echo "")
        fi
        
        # Method 4: Try from bumpversion.cfg
        if [ -z "$VERSION" ]; then
          VERSION=$(grep '^current_version = ' .bumpversion.cfg | cut -d' ' -f3 || echo "")
        fi
        
        echo "Extracted version: $VERSION"
        if [ -z "$VERSION" ]; then
          echo "Error: Could not extract version from any source"
          exit 1
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$VERSION" >> $GITHUB_OUTPUT
        
    - name: Get tag name for release
      id: tag
      if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag=v${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
      
    - name: Create distribution zip
      if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
      run: |
        # Ensure dist directory exists and has content
        if [ ! -d "dist" ] || [ -z "$(ls -A dist)" ]; then
          echo "Error: dist directory is empty or doesn't exist"
          exit 1
        fi
        
        echo "Contents of dist directory:"
        ls -la dist/
        
        cd dist
        zip -r ../mcp-servers-${{ steps.tag.outputs.tag }}.zip .
        cd ..
        
        echo "Created zip file:"
        ls -la mcp-servers-${{ steps.tag.outputs.tag }}.zip
        
    - name: Create Release with GitHub CLI
      if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
      run: |
        # Debug information
        echo "Creating release with tag: ${{ steps.tag.outputs.tag }}"
        echo "Files to upload:"
        ls -la ./dist/mcp_servers.json || echo "mcp_servers.json not found"
        ls -la ./mcp-servers-${{ steps.tag.outputs.tag }}.zip || echo "zip file not found"
        
        # Verify files exist before creating release
        if [ ! -f "./dist/mcp_servers.json" ]; then
          echo "Error: mcp_servers.json not found"
          exit 1
        fi
        
        if [ ! -f "./mcp-servers-${{ steps.tag.outputs.tag }}.zip" ]; then
          echo "Error: zip file not found"
          exit 1
        fi
        
        # Create release
        gh release create ${{ steps.tag.outputs.tag }} \
          --title "Release ${{ steps.tag.outputs.tag }}" \
          --notes "## MCP Servers Release ${{ steps.tag.outputs.tag }}

        This release contains the latest MCP servers configuration file.

        ### üì¶ Downloads
        - **\`mcp_servers.json\`** - Individual JSON file for direct use
        - **\`mcp-servers-${{ steps.tag.outputs.tag }}.zip\`** - Complete distribution package

        ### üìã What's Included
        - Complete list of available MCP servers
        - Base template servers from \`templates/base_mcp.json\`
        - Dynamically fetched servers from the MCP registry
        - Total servers: Base + Fetched from API

        ### üöÄ Usage
        1. Download either the JSON file directly or the zip package
        2. Use with your MCP-compatible tools and applications
        3. The JSON file contains all server configurations in a standardized format

        ### ‚ö†Ô∏è Note
        **Ignore the \"Source code\" downloads** - they contain the entire repository. 
        Use the files listed above for the MCP servers data." \
          ./dist/mcp_servers.json \
          ./mcp-servers-${{ steps.tag.outputs.tag }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}